<#
.SYNOPSIS
  Production-grade Node.js Docker initializer.
.DESCRIPTION
  Ensures package.json, package-lock.json, and server.js exist. Can auto-generate server.js if missing.
.PARAMETER Force
  Overwrites existing server.js if present.
.EXAMPLE
  .\Initialize-NodeProject.ps1
#>

param(
    [switch]$Force
)

$LogFile = Join-Path $PWD "node-project-initialize-log.txt"
$Log = @()

function Log {
    param([string]$Message)
    Write-Host $Message
    $Log += $Message
}

function Save-Log {
    $Log | Out-File -Encoding utf8 -FilePath $LogFile
}

Log "------------------------------------------------------------"
Log "‚úÖ Node.js Docker Project Initializer"
Log "------------------------------------------------------------"
Log "üïí Timestamp: $(Get-Date)"
Log "üìÇ Working Directory: $PWD"

# 1Ô∏è‚É£ Check Docker CLI
try {
    $dockerVersion = docker --version
    Log "‚úîÔ∏è Docker CLI found: $dockerVersion"
} catch {
    Log "‚ùå ERROR: Docker CLI not found. Install Docker Desktop first."
    Save-Log
    exit 1
}

# 2Ô∏è‚É£ Check Docker Daemon
try {
    $dockerInfo = docker info 2>&1
    if ($dockerInfo -match "error during connect") {
        Log "‚ö†Ô∏è WARNING: Docker daemon not responding. Make sure Docker Desktop is running."
    } else {
        Log "‚úîÔ∏è Docker daemon is responsive."
    }
} catch {
    Log "‚ö†Ô∏è WARNING: Could not verify Docker daemon."
}

# 3Ô∏è‚É£ Check for package.json
$PackageJson = Join-Path $PWD "package.json"
if (!(Test-Path $PackageJson)) {
    Log "‚ùå ERROR: package.json not found."
    Log "‚û°Ô∏è You need to initialize a Node project here first:"
    Log "   npm init -y"
    Save-Log
    exit 1
}
Log "‚úîÔ∏è Found package.json"

# 4Ô∏è‚É£ Check for package-lock.json
$PackageLock = Join-Path $PWD "package-lock.json"
if (!(Test-Path $PackageLock)) {
    Log "‚ùå ERROR: package-lock.json not found."
    Log "‚û°Ô∏è You should install dependencies to generate it:"
    Log "   npm install"
    Save-Log
    exit 1
}
Log "‚úîÔ∏è Found package-lock.json"

# 5Ô∏è‚É£ Check for server.js
$ServerFile = Join-Path $PWD "server.js"
$serverExists = Test-Path $ServerFile

if ($serverExists -and (-not $Force)) {
    Log "‚úîÔ∏è server.js already exists: $ServerFile"
    Log "‚ùå Aborting to avoid overwriting."
    Log "‚û°Ô∏è Tip: Use -Force to overwrite."
    Save-Log
    exit 0
}

if ($serverExists -and $Force) {
    Log "‚ö†Ô∏è Overwriting existing server.js (because -Force is set)."
}

# 6Ô∏è‚É£ Offer to create server.js if missing
if (-not $serverExists -or $Force) {
    Log "‚ùì Generating production-ready Express server.js..."
    $serverContent = @"
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello from Docker!');
});

app.listen(port, () => {
  console.log(\`Server running on port \${port}\`);
});
"@

    try {
        $serverContent | Out-File -Encoding utf8 -FilePath $ServerFile -Force
        Log "‚úÖ Created server.js at: $ServerFile"
    } catch {
        Log "‚ùå ERROR: Failed to write server.js"
        Log $_
        Save-Log
        exit 1
    }
}

Log "‚úÖ All checks complete!"
Log "‚úÖ Your project now has:"
Log "   - package.json"
Log "   - package-lock.json"
Log "   - server.js"
Log "‚úÖ You're ready to build:"
Log "   docker build -t yourimagename ."
Log "------------------------------------------------------------"
Save-Log
